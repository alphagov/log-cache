// Code generated by go-bindata.
// sources:
// certs/log-cache-ca.crl
// certs/log-cache-ca.crt
// certs/log-cache-ca.key
// certs/log-cache.crt
// certs/log-cache.csr
// certs/log-cache.key
// DO NOT EDIT!

package testing

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _logCacheCaCrl = []byte(`-----BEGIN X509 CRL-----
MIIChjBwAgEBMA0GCSqGSIb3DQEBCwUAMBcxFTATBgNVBAMTDGxvZy1jYWNoZS1j
YRcNMTgwMTEwMjEyMzQ0WhcNMTkwNzEwMjEyMzQyWjAAoCMwITAfBgNVHSMEGDAW
gBTOa+ZwFVIdpQE/wUq08/tGA7j7VTANBgkqhkiG9w0BAQsFAAOCAgEAMjKFwn8H
DiA19v27aZWb2e7ARS08+gy+jteJovFAFXz/YLLJkYF6JJnukp9uiqQGprpfLivO
SdfFhcy6PR/cCVDakT6gaKD5O4E71mJpOjGv7zt6QL7fGiXz2Kht/GERBedUS/hD
WMU8IA1NzSITOiwnKzI+E5QC2pRsEycR0/mtmyqj3u1ZIjtNDRZzCP71OodMptFz
fOhCeLK1TeMGKQRiy2qkSXOhiXvcjQhpglsUdJLzycpQfxNdOUvSoLVzcHFAHxiC
iqyo6CxWVNLSHlpDG31znfGh7le8ps8i8qnnUjbM25k6tE9Pedeh+ti8NBqVN9d4
uOjfvLRrpmF2LqBrsXcbY81QM/xwsz0WYMtt9xOsEOxHkgeCBXnFk9aDowcLYwGK
68xGnYwQxbzrrSurB5b+/5dr6Mo9hvACbnQEBXdkYSXmbBhXJXSGga16hguaLaB5
pKiH8XTBrCxS4pPHi8h4kqU8aFq65wrkGlmCkZVc3fEp0ZX7/VeO/vLPM1rQv7u3
cOKkNTeefb7NxQd3zdzmtR11E8OyogPhwxb2c4YYpab3SQ673IoOZ5UPv+2Tfep5
gm696kyYxOEqBTizhDyTSWLJi1UmmT7GKKO8kd6F6MZ7tUrf01uCFSJqOoDXXu4G
qCHrE3FQkL2bjMHs14V6jslqADUXKTkuC58=
-----END X509 CRL-----
`)

func logCacheCaCrlBytes() ([]byte, error) {
	return _logCacheCaCrl, nil
}

func logCacheCaCrl() (*asset, error) {
	bytes, err := logCacheCaCrlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log-cache-ca.crl", size: 930, mode: os.FileMode(292), modTime: time.Unix(1515619424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logCacheCaCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIE7jCCAtagAwIBAgIBATANBgkqhkiG9w0BAQsFADAXMRUwEwYDVQQDEwxsb2ct
Y2FjaGUtY2EwHhcNMTgwMTEwMjEyMzQyWhcNMTkwNzEwMjEyMzQyWjAXMRUwEwYD
VQQDEwxsb2ctY2FjaGUtY2EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
AQDTepqydlF346jGl3w2fP1U/cDIZGxTI9qRJ67Nm2YgSTpLpkWz6aUDGJm13dJB
FOAA28l6sCSEsNUuNwCDeQHT/9qLNnFRAQnIaP0Y5pF3pkSYANMowIDQyYNs5rEQ
OVFeV5oLZOPX3NNefSJLwOmghVKmVbml9NY4WRSTAZOKaEszlnUrz/Ztp6vIHgEG
g1qse6FNBbmlJUU5tvUIBtDPeRXXxtYOghR7l+GseRQGQC+wtGHeEHwk0y7m//tF
z9RQXJJW4nvajGdM38riCaebodqKznxNf4/27M2z5p64lOA/pt3/x4kIGJMeZWTq
RcsJBmRQBu+if2hLFESwMimK6Tlc/yMOEA4qJOQTfqjaHVkPkkNT7OmMNxNRYgpZ
OgygrcT0pJfaDkK4ebFjfp+smWIIPHypLpXEaFIAXgzjlwvNJW+IGo+xzKbZPq69
lOG4urrSBXRk47qYheTStuXuxOeYuiMwgOmry+CrbEBkTXlK5SoXhI/4m6FckgcL
qi1M7xiQHi4e9ocp0YeBzSN5ZknhI8rJCHvlkpuJvgQGt8rF1GO2BRD2zWL8NpRI
BIN5kCAkIuLm0qWMfzydG4N5e3swZaNVmIbuCm3Ph4djQ9p5cHKbenlzOVPR63HU
+AdMjfIXUVWHcTNmzPEF9awkZZBJgUBvdGFV82dO3zKgawIDAQABo0UwQzAOBgNV
HQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUzmvmcBVS
HaUBP8FKtPP7RgO4+1UwDQYJKoZIhvcNAQELBQADggIBAGGkSq7swsLUfzwWAFVc
Z481z39pvM7EuWri6yHOoRPWgLCpF9Ns/PMsqSxvTx8dSIpsJ7B57ExzX4z7nkHE
IX5+9JlOouUNAyDFVQCh44EEYa0DzokWAced09DyGxIO8BOXX7wTVpST9o6713vf
DMa5Jf5QJE8czKkIwVcZzO+LuYfZfa7/2Ahy1qIjFGey5aUq4KDdFzlLr+d+sh+c
6kydL78nsrBvzAlM+W4Hto42raFZaIfDoUcHwKafyq86+AfCeZR0STLC3kbSzfBp
/k7bajtPQLbq2h4fijZOGdfAQ9De7m5GDNILVzxj+6aeF8zA/URVJ4dJUmwtxFPR
Ij1a0Yn2KSjeTHn4e2HbCtC5c2SnSqGP8qtB83T86qua8g3R+KeS02d/I2ZLnrfk
XDE29ieFt02Xv6eleJpKcodyb3ue5AYJ28MaHQ9+3EECpnjYTut1Nz+nsNx996d6
KUFzUJu694YgvIXmXWYKpt2RNnFVGTrQTgwrMPdqjHrN5KMIwPt/m+o7vD0c/YUZ
Q30Mf6VAyS6JqY7AU02xC1tYvE5lBipP2/gN8DauySQSC3nrp1SRdAgC1oT6QFjH
+J98u5YihZndQ2fUsblKPAKHeZfDHiF0fjQwCl7NgNnvtEPYZuCeINPN1Qf8m0nE
go4UiYFbfKZdEA3nL/kOtgr+
-----END CERTIFICATE-----
`)

func logCacheCaCrtBytes() ([]byte, error) {
	return _logCacheCaCrt, nil
}

func logCacheCaCrt() (*asset, error) {
	bytes, err := logCacheCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log-cache-ca.crt", size: 1769, mode: os.FileMode(292), modTime: time.Unix(1515619424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logCacheCaKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
`)

func logCacheCaKeyBytes() ([]byte, error) {
	return _logCacheCaKey, nil
}

func logCacheCaKey() (*asset, error) {
	bytes, err := logCacheCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log-cache-ca.key", size: 3243, mode: os.FileMode(288), modTime: time.Unix(1515619424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logCacheCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIEJzCCAg+gAwIBAgIRALkwlMIQ4+K8dnoLYZ75MXkwDQYJKoZIhvcNAQELBQAw
FzEVMBMGA1UEAxMMbG9nLWNhY2hlLWNhMB4XDTE4MDExMDIxMjM0NFoXDTE5MDcx
MDIxMjM0MVowFDESMBAGA1UEAxMJbG9nLWNhY2hlMIIBIjANBgkqhkiG9w0BAQEF
AAOCAQ8AMIIBCgKCAQEAuvibEgKm9itonQE9sepAOoI4guJTg457d8Gp90oia2Wq
D1GE1WiB1LED8RyEgwAEv+wTaAYVHX4/5S6pDU+fI1Vm5ztbWNh91SwSuiGX81yq
xUK94WZsA8JOajdjqGLknk8cVEC4dZEyKLzQGZINZEvJAxIckSVfyoUgyPIOlw5R
KvYKLCMyr0f8TAJKp3YCswa10We6GYRZyxUJ3lMRp7ocuIcBvzqX1V3KadpWU5CN
aIUoyZ7fXkITTVFYhfKYfWf81H1QXP7iLfVmKyfadCYqUse/RhVM6Ikpr9ukrAvu
aynekY5ONZvQYVK3vf3zel7MPw+kaPf59xprpoSKiwIDAQABo3EwbzAOBgNVHQ8B
Af8EBAMCA7gwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQW
BBRvDEmvos/RAY/vc6XIuwuUPcXyxTAfBgNVHSMEGDAWgBTOa+ZwFVIdpQE/wUq0
8/tGA7j7VTANBgkqhkiG9w0BAQsFAAOCAgEAPCjkd6yuYLQnh9PtyUBcMC9Jgo5K
rHKJCy8R/2v+pUo2kT8/+mowqLSyXFawCId9mpetYnS69LDrrpZzWwfPpuMb0L0s
a6k8JyvKeYCgu676JpI7mi0KYoKhYlqkaT1TFpIO2H0G+VSPlgL0B5LmmvVIj0un
p0TBhfVzr8Y0Cs0aAaVnR67sdKZvN2MvjA0pp2j+doWJNp2RfNEggQpupEx2rl1v
SoDOf3BXLJ4KRwmViLMuU0agHgJ18XoEzxQXjVstYApHVcmFe3oQblDIvHmxZuC3
xTm+nxTRfJxgv0ppnqseWjWlww6byHSVHJxrD4xa8C1scyGOHCpFw1YT1C3fLexp
nLwTicdcbavvRG3WMwhtDibQx9bp7qyeNeCikyMUwlxIjx8+lqw1REyIA83ayg5d
h54PUz9rB+OBC09rFz9+9qWqP5kq8i/xBdZd9QHGoS7ATxVGROBaylP6Rf4Ul0DL
fbqZRQFA88lgpH4F3BOADlXXS0yb6wci92FOtN06vHE938oIdKLJX+GpDLnbOV+A
Ljo/EAKOnBKrWAplXz7a4TOmd/ZwfhMNT1lwTyotpIlPkss9k4anXkXTBhvHHYXy
mnnE3p6vZ+ljYXS/TZtgRbx41U+ICUlIuAlijGem+XMRXdRcTDZXwBAJMI5M+umR
Ben3uaTBdx7Qhyg=
-----END CERTIFICATE-----
`)

func logCacheCrtBytes() ([]byte, error) {
	return _logCacheCrt, nil
}

func logCacheCrt() (*asset, error) {
	bytes, err := logCacheCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log-cache.crt", size: 1501, mode: os.FileMode(292), modTime: time.Unix(1515619424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logCacheCsr = []byte(`-----BEGIN CERTIFICATE REQUEST-----
MIICWTCCAUECAQAwFDESMBAGA1UEAxMJbG9nLWNhY2hlMIIBIjANBgkqhkiG9w0B
AQEFAAOCAQ8AMIIBCgKCAQEAuvibEgKm9itonQE9sepAOoI4guJTg457d8Gp90oi
a2WqD1GE1WiB1LED8RyEgwAEv+wTaAYVHX4/5S6pDU+fI1Vm5ztbWNh91SwSuiGX
81yqxUK94WZsA8JOajdjqGLknk8cVEC4dZEyKLzQGZINZEvJAxIckSVfyoUgyPIO
lw5RKvYKLCMyr0f8TAJKp3YCswa10We6GYRZyxUJ3lMRp7ocuIcBvzqX1V3KadpW
U5CNaIUoyZ7fXkITTVFYhfKYfWf81H1QXP7iLfVmKyfadCYqUse/RhVM6Ikpr9uk
rAvuaynekY5ONZvQYVK3vf3zel7MPw+kaPf59xprpoSKiwIDAQABoAAwDQYJKoZI
hvcNAQELBQADggEBAKjronyQkSKHXBbjUpfR+bC+01stz0fbPK1qQiAGx6y3tGZO
vtMeVfGczuxKDox+jODKZZEtoafjjeaWCl/xsJWdm3ezW2hNkCxgzz8a5BkbPjEA
EEewbt9Y9gMB3W1Vac9LCmIOPc54JDPziZlsVovlUa6S84c6k9xWIQuU9ViYyFw8
OoL4ymnLaago8zt1eKyd/uFXO0sEg6JKwj20Djhlh/FcqUoYkdI33+I0X9WgwLJP
oRI87TZo74gs/BDePnB2SCbYjzOHoMvkJPmlF9wpY4/7BJigdNVpqu1JI6cvHnMD
QaaLwjOeTAhVUdLKqpL7xb7XYyvc2ykssUE7Cqs=
-----END CERTIFICATE REQUEST-----
`)

func logCacheCsrBytes() ([]byte, error) {
	return _logCacheCsr, nil
}

func logCacheCsr() (*asset, error) {
	bytes, err := logCacheCsrBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log-cache.csr", size: 891, mode: os.FileMode(292), modTime: time.Unix(1515619424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logCacheKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAuvibEgKm9itonQE9sepAOoI4guJTg457d8Gp90oia2WqD1GE
1WiB1LED8RyEgwAEv+wTaAYVHX4/5S6pDU+fI1Vm5ztbWNh91SwSuiGX81yqxUK9
4WZsA8JOajdjqGLknk8cVEC4dZEyKLzQGZINZEvJAxIckSVfyoUgyPIOlw5RKvYK
LCMyr0f8TAJKp3YCswa10We6GYRZyxUJ3lMRp7ocuIcBvzqX1V3KadpWU5CNaIUo
yZ7fXkITTVFYhfKYfWf81H1QXP7iLfVmKyfadCYqUse/RhVM6Ikpr9ukrAvuayne
kY5ONZvQYVK3vf3zel7MPw+kaPf59xprpoSKiwIDAQABAoIBADGGyQzsRu3Ocdel
DIKkWn8lH3MMILMoeuwuEKfAq31nYLTOEzG0jS+Z9EFaHH/W8WslTb6wXceCOcqr
oXw1KyJg7PEzd+8A6dQd6JgFbgq48UNvenzKdLJKNhtMsMlZ6NVGf2qR+kqqO28v
FLCxT3rR2F1H3ulTzRwIR7by54p7fHN6mwk9xdyMiNnrZQEg7Mp2Md6utTGMxFih
Vf9NMVoA+eg5kbAClq7f5ryia5FVorPEsJeJk5igvRZEAObU1tfwVThYjf6nU6GD
apyS+mw8D4BKoDkYjOU6Su/jOE7XW6m0HKbCyY1glDTK75HXc7I6CiqH++GEspg5
dJY+XoECgYEA1WUHO1ZyhVF/EvOWl8xlO0y5AhH6wFujvO/tJyQyys7pfVgr3Jhl
XTnMT8VhJDXBmCz4bvt46gCIwG+3ZEsW6YWJQPtg/GYfw0K48CYKGvQZ4qtQlIeB
X64ovDhRjz6e16Zmv7Nm60fs4G9AbEV1B//oftCAQvrgh7FiIePLeDcCgYEA4E0G
bKAANCysSFX/pt+yboQ5dwm9YCNOAQ2QbezOoVf0bbE72rAW9XRN6ogGZ9tBGHxT
U7JkjjnL4Ql4lIM1YHI4Mt9HLSnB1HdIjSSISrgbcXhc+DKIg1JWR5DQCdX0XcW1
k/jS6eLqm6JVte3uh8RYoGrA1ZxUBgTksVhErk0CgYBTg/ullHqzhKa4Ew9gD4Wb
BLbvgXviprrZagklpXwfdYVaIhTge+BH8SPuIHCZTFSdKxR70v2Kj3T144MhxGWO
NU33WaqmfY12zPk2O5z+2YP7+1JJHxNaD/4vU9dPuZFPEvfplNv1vyuM1t2ewjxA
Sj6CyzU3gZo4YQrn+pAaVwKBgDRGf1rNp36Bct2g/WY8+G79bg8qO/KuB74DFUgp
SrcbsqHmDpcXNyKZqpcggK2v0eoM/7af+wOSwMt/05R5R/VkaWih1QrXko8cBdKv
UvxnEC5P6QsHa/1/MRCY1YOVU9CPBZSpBy7vbdI78VHnVBJcVnN8rdibCJImjc4v
TkJ5AoGBAMlUjaR0w4YMoOwwIS+zhrlcX4c2IoF3b/N7vxwW9HANJZEHrwHpPE6y
Ox9t5xccDdw6qdOMyS/7wCrtNR1F2YLSWrrBtCdDUzCPlKycL+TOK+WIbBkB3QKP
yUR+YcGqPCqJG16kEjI06R+zeEyBJytbshmXwZMnR/8kvc/ZLMq7
-----END RSA PRIVATE KEY-----
`)

func logCacheKeyBytes() ([]byte, error) {
	return _logCacheKey, nil
}

func logCacheKey() (*asset, error) {
	bytes, err := logCacheKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log-cache.key", size: 1675, mode: os.FileMode(288), modTime: time.Unix(1515619424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"log-cache-ca.crl": logCacheCaCrl,
	"log-cache-ca.crt": logCacheCaCrt,
	"log-cache-ca.key": logCacheCaKey,
	"log-cache.crt":    logCacheCrt,
	"log-cache.csr":    logCacheCsr,
	"log-cache.key":    logCacheKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"log-cache-ca.crl": {logCacheCaCrl, map[string]*bintree{}},
	"log-cache-ca.crt": {logCacheCaCrt, map[string]*bintree{}},
	"log-cache-ca.key": {logCacheCaKey, map[string]*bintree{}},
	"log-cache.crt":    {logCacheCrt, map[string]*bintree{}},
	"log-cache.csr":    {logCacheCsr, map[string]*bintree{}},
	"log-cache.key":    {logCacheKey, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
